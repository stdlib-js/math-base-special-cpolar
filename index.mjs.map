{"version":3,"file":"index.mjs","sources":["../lib/assign.js","../lib/main.js","../lib/index.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2023 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cphase from '@stdlib/math-base-special-cphase';\nimport cabs from '@stdlib/math-base-special-cabs';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @param {Collection} out - output array\n* @param {integer} stride - output array stride\n* @param {NonNegativeInteger} offset - output array index offset\n* @returns {Collection} absolute value and phase (in radians)\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var o = cpolar( new Complex128( 5.0, 3.0 ), [ 0.0, 0.0 ], 1, 0 );\n* // returns [ ~5.83, ~0.5404 ]\n*/\nfunction cpolar( z, out, stride, offset ) {\n\tout[ offset ] = cabs( z );\n\tout[ offset+stride ] = cphase( z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default cpolar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport assign from './assign.js';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a double-precision complex floating-point number.\n*\n* @param {Complex128} z - complex number\n* @returns {Array<number>} absolute value and phase (in radians)\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n*\n* var o = cpolar( new Complex128( 5.0, 3.0 ) );\n* // returns [ ~5.83, ~0.5404 ]\n*/\nfunction cpolar( z ) {\n\treturn assign( z, [ 0.0, 0.0 ], 1, 0 );\n}\n\n\n// EXPORTS //\n\nexport default cpolar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/**\n* Compute the absolute value and the phase of a double-precision complex floating-point number.\n*\n* @module @stdlib/math-base-special-cpolar\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import cpolar from '@stdlib/math-base-special-cpolar';\n*\n* var o = cpolar( new Complex128( 5.0, 3.0 ) );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* @example\n* import Complex128 from '@stdlib/complex-float64-ctor';\n* import Float64Array from '@stdlib/array-float64';\n* import cpolar from '@stdlib/math-base-special-cpolar';\n*\n* var out = new Float64Array( 2 );\n*\n* var v = cpolar.assign( new Complex128( 5.0, 3.0 ), out, 1, 0 );\n* // returns <Float64Array>[ ~5.83, ~0.5404 ]\n*\n* var bool = ( v === out );\n* // returns true\n*/\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property';\nimport assign from './assign.js';\nimport main from './main.js';\n\n\n// MAIN //\n\nsetReadOnly( main, 'assign', assign );\n\n\n// EXPORTS //\n\nexport default main;\n"],"names":["cpolar","z","out","stride","offset","cabs","cphase","assign","setReadOnly","main"],"mappings":";;uSA2CA,SAASA,EAAQC,EAAGC,EAAKC,EAAQC,GAGhC,OAFAF,EAAKE,GAAWC,EAAMJ,GACtBC,EAAKE,EAAOD,GAAWG,EAAQL,GACxBC,CACR,CCRA,SAASF,EAAQC,GAChB,OAAOM,EAAQN,EAAG,CAAE,EAAK,GAAO,EAAG,EACpC,CCcAO,EAAAC,EAAA,SAAAF"}
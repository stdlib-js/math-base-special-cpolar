{"version":3,"file":"index.mjs","sources":["../lib/cpolar.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport cabs from '@stdlib/math-base-special-cabs';\nimport cphase from '@stdlib/math-base-special-cphase';\nimport Complex128 from '@stdlib/complex-float64';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a complex number.\n*\n* @private\n* @param {(Array|TypedArray|Object)} out - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} absolute value and phase (in radians)\n*\n* @example\n* var out = new Array( 2 );\n*\n* var o = cpolar( out, 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* var bool = ( o === out );\n* // returns true\n*/\nfunction cpolar( out, re, im ) {\n\tvar z;\n\n\tz = new Complex128( re, im );\n\tout[ 0 ] = cabs( z );\n\tout[ 1 ] = cphase( z );\n\treturn out;\n}\n\n\n// EXPORTS //\n\nexport default cpolar;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2018 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport polar from './cpolar.js';\n\n\n// MAIN //\n\n/**\n* Computes the absolute value and the phase of a complex number.\n*\n* @param {(Array|TypedArray|Object)} [out] - output array\n* @param {number} re - real component\n* @param {number} im - imaginary component\n* @returns {(Array|TypedArray|Object)} absolute value and phase (in radians)\n*\n* @example\n* var o = cpolar( 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* @example\n* var out = new Array( 2 );\n*\n* var o = cpolar( out, 5.0, 3.0 );\n* // returns [ ~5.83, ~0.5404 ]\n*\n* var bool = ( o === out );\n* // returns true\n*/\nfunction cpolar( out, re, im ) {\n\tif ( arguments.length === 2 ) {\n\t\treturn polar( [ 0.0, 0.0 ], out, re );\n\t}\n\treturn polar( out, re, im );\n}\n\n\n// EXPORTS //\n\nexport default cpolar;\n"],"names":["cpolar","out","re","im","z","Complex128","cabs","cphase","arguments","length","polar"],"mappings":";;yQA+CA,SAASA,EAAQC,EAAKC,EAAIC,GACzB,IAAIC,EAKJ,OAHAA,EAAI,IAAIC,EAAYH,EAAIC,GACxBF,EAAK,GAAMK,EAAMF,GACjBH,EAAK,GAAMM,EAAQH,GACZH,CACR,CCNA,SAASD,EAAQC,EAAKC,EAAIC,GACzB,OAA0B,IAArBK,UAAUC,OACPC,EAAO,CAAE,EAAK,GAAOT,EAAKC,GAE3BQ,EAAOT,EAAKC,EAAIC,EACxB"}